@page "/signup"

@using BlazorStockApp.Data.Contexts
@using BlazorStockApp.ViewModels
@using BlazorStockApp.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject AppDbContext DbContext;
@inject NavigationManager NavigationManager;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="SignupForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/Resources/Images/Logo.png" style="max-height:5rem;" />
                <h3>SIGN UP</h3>
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="Model.FirstName" class="form-control" placeholder="First Name" />
                <ValidationMessage For="@(() => Model.FirstName)" />
            </div>
            <div class="mb-3">
                <label>Last Name</label>
                <InputText @bind-Value="Model.LastName" class="form-control" placeholder="Last Name" />
                <ValidationMessage For="@(() => Model.LastName)" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="Model.ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Sign Up</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public SignupViewModel Model { get; set; } = new();
    private string? ErrorMessage;

    private async Task Authenticate()
    {
        var user = DbContext.Users.Where(u => u.Email == Model.Email).FirstOrDefault();
        if (user != null)
        {
            ErrorMessage = "User already exists";
            return;
        }

        await DbContext.Users.AddAsync(new User
        {
            Email = Model.Email,
            Password = Model.Password,
            FirstName = Model.FirstName,
            LastName = Model.LastName,
            Role = "user"
        });

        // Authentication successful, proceed with login
        ErrorMessage = null;

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.GivenName, Model.FirstName),
            new Claim(ClaimTypes.Surname, Model.LastName),
            new Claim(ClaimTypes.Role, "user")
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
}
