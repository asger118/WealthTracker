@page "/login"

@using BlazorStockApp.Data.Contexts
@using BlazorStockApp.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject AppDbContext DbContext;
@inject NavigationManager NavigationManager;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/Resources/Images/user-icon.svg" style="max-height:5rem;" class="mb-3" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" type="email" placeholder="Email" />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <div class="mb-3 text-center">
                <a href="/signup">Don't have an account? Sign up here</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();
    private string? ErrorMessage;

    private async Task Authenticate()
    {
        var user = DbContext.Users.Where(u => u.Email == Model.Email).FirstOrDefault();
        if (user == null)
        {
            ErrorMessage = "No user with this email exists";
            return;
        }

        if (user.Password != Model.Password)
        {
            ErrorMessage = "Incorrect password";
            return;
        }

        // Authentication successful, proceed with login
        ErrorMessage = null;

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.GivenName, user.FirstName),
            new Claim(ClaimTypes.Surname, user.LastName),
            new Claim(ClaimTypes.Role, user.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
}
