@page "/signup"
@inject SignupService SignupService;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="SignupForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/Resources/Images/user-icon.svg" style="max-height:5rem;" class="mb-3" />
                <h3 class="">SIGN UP</h3>
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="Model.FirstName" class="form-control" placeholder="First Name" type="text" autocomplete="given-name" />
                <ValidationMessage For="@(() => Model.FirstName)" />
            </div>
            <div class="mb-3">
                <label>Last Name</label>
                <InputText @bind-Value="Model.LastName" class="form-control" placeholder="Last Name" type="text" autocomplete="family-name" />
                <ValidationMessage For="@(() => Model.LastName)" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" type="email" autocomplete="email" />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" autocomplete="new-password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="Model.ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" autocomplete="new-password" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Sign Up</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public SignupViewModel Model { get; set; } = new SignupViewModel();

    private string? ErrorMessage;

    private async Task Authenticate()
    {
        ErrorMessage = await SignupService.RegisterUser(Model);
    }
}