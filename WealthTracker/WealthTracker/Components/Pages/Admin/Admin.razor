@page "/admin"
@attribute [Authorize(Roles = "admin")]
@inject AppDbContext DbContext;
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore

<h3>Registered Users</h3>
<table class="table w-50">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Users)
        {
            <tr @key="user.UserId">
                @if (isEditing && editingUser.UserId == user.UserId)
                {
                    <td><InputText class="form-control" @bind-Value="editingUser.FirstName" /></td>
                    <td><InputText class="form-control" @bind-Value="editingUser.LastName" /></td>
                    <td><InputText class="form-control" @bind-Value="editingUser.Email" /></td>
                    <td>
                        <InputSelect class="form-control" @bind-Value="editingUser.Role">
                            <option value="admin">Admin</option>
                            <option value="user">User</option>
                        </InputSelect>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="SaveEdit">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </td>
                }
                else
                {
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
<h3>Add New Stock</h3>
<EditForm Model="newStock" OnValidSubmit="AddStock" style="width:10rem;">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="ticker">Ticker</label>
        <InputText id="ticker" class="form-control mb-2" @bind-Value="newStock.Ticker" />
    </div>
    <button type="submit" class="btn btn-success">Add Stock</button>
</EditForm>


@code {
    private List<User> Users = new List<User>();
    private User editingUser = new User();
    private Stock newStock = new Stock();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        Users = await DbContext.Users.ToListAsync();
    }

    private async Task AddStock()
    {
        // Get stock from api


        DbContext.Stocks.Add(newStock);
        await DbContext.SaveChangesAsync();
        newStock = new Stock(); 
    }

    private void EditUser(User user)
    {
        editingUser = new User
        {
            UserId = user.UserId,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            Role = user.Role
        };
        isEditing = true;
    }

    private async Task DeleteUser(int userId)
    {
        var user = await DbContext.Users.FindAsync(userId);
        if (user != null)
        {
            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();
            Users.Remove(user);
        }
    }

    private async Task SaveEdit()
    {
        var userInDb = await DbContext.Users.FindAsync(editingUser.UserId);
        if (userInDb != null)
        {
            userInDb.FirstName = editingUser.FirstName;
            userInDb.LastName = editingUser.LastName;
            userInDb.Email = editingUser.Email;
            userInDb.Role = editingUser.Role;

            await DbContext.SaveChangesAsync();
        }

        Users = await DbContext.Users.ToListAsync();
        isEditing = false;
    }

    private void CancelEdit()
    {
        isEditing = false;
    }
}
